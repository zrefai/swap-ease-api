{
  "openapi": "3.1.0",
  "info": {
    "title": "ðŸŽ¨ NFT API",
    "version": "1.0"
  },
  "servers": [
    {
      "description": "Ethereum Mainnet",
      "url": "https://eth-mainnet.g.alchemy.com/nft/v2"
    },
    {
      "description": "Ethereum Rinkeby",
      "url": "https://eth-rinkeby.g.alchemy.com/nft/v2"
    },
    {
      "description": "Ethereum Goerli",
      "url": "https://eth-goerli.g.alchemy.com/nft/v2"
    },
    {
      "description": "Polygon Mainnet",
      "url": "https://polygon-mainnet.g.alchemyapi.io/nft/v2"
    },
    {
      "description": "Polygon Mumbai",
      "url": "https://polygon-mumbai.g.alchemy.com/nft/v2"
    }
  ],
  "paths": {
    "/{apiKey}/getNFTs": {
      "get": {
        "summary": "getNFTs",
        "description": "Gets all NFTs currently owned by a given address.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          },
          {
            "description": "String - Address for NFT owner (can be in ENS format!).",
            "name": "owner",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": true
          },
          {
            "description": "String - UUID for pagination. If more results are available, a UUID pageKey will be returned in the response. Pass that UUID into pageKey to fetch the next 100 NFTs. NOTE - pageKeys expire after 10 minutes.",
            "name": "pageKey",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "description": "Array of contract addresses to filter the responses with. Max limit 20 contracts.",
            "name": "contractAddresses[]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "description": "True by default - If boolean is set to true the query will include metadata for each returned token. Setting this to false will reduce payload size and may result in a faster API call.",
            "name": "withMetadata",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "in": "query"
          },
          {
            "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.",
            "name": "tokenUriTimeoutInMs",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Array of filters (as ENUMS) that will be applied to the query. NFTs that match one or more of these filters will be excluded from the response. Filter Options:\n - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs.",
            "name": "filters[]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "SPAM"
                ]
              }
            },
            "in": "query"
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Setup: npm install alchemy-sdk\n// Github: https://github.com/alchemyplatform/alchemy-sdk-js\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: demo, // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Print all NFTs returned in the response:\nalchemy.nft.getNftsForOwner(\"0xshah.eth\").then(console.log);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "Returns true if transaction was successfully cancelled, false if not.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ownedNfts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contract": {
                            "description": "Object - Contract for returned NFT",
                            "type": "object",
                            "properties": {
                              "address": {
                                "type": "string",
                                "description": "String - Address of NFT contract."
                              }
                            }
                          },
                          "id": {
                            "type": "object",
                            "properties": {
                              "tokenId": {
                                "type": "string",
                                "description": "String - Id for NFT (hex)."
                              },
                              "tokenMetadata": {
                                "type": "object",
                                "properties": {
                                  "tokenType": {
                                    "type": "string",
                                    "description": "String - 'ERC721' or 'ERC1155'"
                                  }
                                }
                              }
                            }
                          },
                          "balance": {
                            "type": "string",
                            "description": "String - Token balance"
                          },
                          "title": {
                            "type": "string",
                            "description": "String - Name of the NFT asset."
                          },
                          "description": {
                            "type": "string",
                            "description": "String - Brief human-readable description"
                          },
                          "tokenUri": {
                            "type": "object",
                            "properties": {
                              "raw": {
                                "type": "string",
                                "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated."
                              },
                              "gateway": {
                                "type": "string",
                                "description": "String - Public gateway uri for the raw uri above."
                              }
                            }
                          },
                          "media": {
                            "type": "object",
                            "properties": {
                              "raw": {
                                "type": "string",
                                "description": "String - Uri representing the location of the NFT media asset. This is a backup for you to parse when the metadata field is not automatically populated."
                              },
                              "gateway": {
                                "type": "string",
                                "description": "String - Public gateway uri for the raw asset above."
                              },
                              "thumbnail": {
                                "type": "string",
                                "description": "URL for a resized thumbnail of the NFT media asset."
                              },
                              "format": {
                                "type": "string",
                                "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets."
                              },
                              "bytes": {
                                "type": "integer",
                                "description": "The size of the media asset in bytes."
                              }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "String - Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
                            "properties": {
                              "image": {
                                "type": "string",
                                "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces."
                              },
                              "external_url": {
                                "type": "string",
                                "description": "String - The image URL that appears alongside the asset image on NFT platforms."
                              },
                              "background_color": {
                                "type": "string",
                                "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal."
                              },
                              "name": {
                                "type": "string",
                                "description": "String - Name of the NFT asset."
                              },
                              "description": {
                                "type": "string",
                                "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)"
                              },
                              "attributes": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "type": "string"
                                    },
                                    "trait_type": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "description": "Object - Traits/attributes/characteristics for each NFT asset."
                              }
                            }
                          },
                          "timeLastUpdated": {
                            "type": "string",
                            "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field."
                          },
                          "error": {
                            "type": "string",
                            "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT."
                          }
                        }
                      }
                    },
                    "pageKey": {
                      "type": "string",
                      "description": "String - UUID for pagination - returned if there are more NFTs to fetch. Max NFTs per page = 100."
                    },
                    "totalCount": {
                      "type": "string",
                      "description": "String -Total number of NFTs owned by the given address."
                    },
                    "blockHash": {
                      "type": "string",
                      "description": "String - The canonical head block hash of when your request was received"
                    }
                  }
                },
                "examples": {
                  "byDefault": {
                    "summary": "Response (By Default)",
                    "value": "{ \"ownedNfts\": [{\n    \"contract\": {\n      \"address\": \"0x0beed7099af7514ccedf642cfea435731176fb02\"\n    },\n    \"id\": {\n      \"tokenId\": \"28\",\n      \"tokenMetadata\": {\n        \"tokenType\": \"ERC721\"\n      }\n    },\n    \"title\": \"DuskBreaker #28\",\n    \"description\": \"Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.\",\n    \"tokenUri\": {\n      \"raw\": \"https://duskbreakers.gg/api/breakers/28\",\n      \"gateway\": \"https://duskbreakers.gg/api/breakers/28\"\n    },\n    \"media\": [{\n      \"raw\": \"https://duskbreakers.gg/breaker_images/28.png\",\n      \"gateway\": \"https://duskbreakers.gg/breaker_images/28.png\"\n    }],\n    \"metadata\": {\n      \"name\": \"DuskBreaker #28\",\n      \"description\": \"Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.\",\n      \"image\": \"https://duskbreakers.gg/breaker_images/28.png\",\n      \"external_url\": \"https://duskbreakers.gg\",\n      \"attributes\": [{\n          \"value\": \"Locust Rider Armor (Red)\",\n          \"trait_type\": \"Clothes\"\n        },\n        {\n          \"value\": \"Big Smile (Purple)\",\n          \"trait_type\": \"Mouth\"\n        },\n        {\n          \"value\": \"Yellow\",\n          \"trait_type\": \"Background\"\n        }\n      ]\n    },\n    \"timeLastUpdated\": \"2022-02-16T22:52:54.719Z\"\n  },\n  {\n    \"contract\": {\n      \"address\": \"0x97597002980134bea46250aa0510c9b90d87a587\"\n    },\n    \"id\": {\n      \"tokenId\": \"5527\",\n      \"tokenMetadata\": {\n        \"tokenType\": \"ERC721\"\n      }\n    },\n    \"title\": \"Runner #5527\",\n    \"description\": \"Chain Runners are Mega City renegades 100% generated on chain.\",\n    \"tokenUri\": {\n      \"raw\": \"https://api.chainrunners.xyz/tokens/metadata/5527?dna=73247164192459371523281785218958151913554625578441142916970699984935810987041\",\n      \"gateway\": \"https://api.chainrunners.xyz/tokens/metadata/5527?dna=73247164192459371523281785218958151913554625578441142916970699984935810987041\"\n    },\n    \"media\": [{\n      \"raw\": \"https://img.chainrunners.xyz/api/v1/tokens/png/5527\",\n      \"gateway\": \"https://img.chainrunners.xyz/api/v1/tokens/png/5527\"\n    }],\n    \"metadata\": {\n      \"name\": \"Runner #5527\",\n      \"description\": \"Chain Runners are Mega City renegades 100% generated on chain.\",\n      \"image\": \"https://img.chainrunners.xyz/api/v1/tokens/png/5527\",\n      \"attributes\": [{\n          \"value\": \"Purple Green Diag\",\n          \"trait_type\": \"Background\"\n        },\n        {\n          \"value\": \"Human\",\n          \"trait_type\": \"Race\"\n        },\n        {\n          \"value\": \"Cig\",\n          \"trait_type\": \"Mouth Accessory\"\n        }\n      ]\n    },\n    \"timeLastUpdated\": \"2022-02-18T00:42:04.401Z\"\n  }],\n  \"totalCount\": 6,\n  \"blockHash\": \"0xeb2d26af5b6175344a14091777535a2cb21c681665a734a8285f889981987630\"\n}\n"
                  },
                  "withoutMetadata": {
                    "summary": "Response (withMetadata = false)",
                    "value": "{\n  \"ownedNfts\": [{\n      \"contract\": {\n        \"address\": \"0x0beed7099af7514ccedf642cfea435731176fb02\"\n      },\n      \"id\": {\n        \"tokenId\": \"0x000000000000000000000000000000000000000000000000000000000000001c\"\n      }\n    },\n    {\n      \"contract\": {\n        \"address\": \"0x0beed7099af7514ccedf642cfea435731176fb02\"\n      },\n      \"id\": {\n        \"tokenId\": \"0x000000000000000000000000000000000000000000000000000000000000001d\"\n      },\n      \"balance\": \"1\"\n    },\n    {\n      \"contract\": {\n        \"address\": \"0x97597002980134bea46250aa0510c9b90d87a587\"\n      },\n      \"id\": {\n        \"tokenId\": \"0x0000000000000000000000000000000000000000000000000000000000001597\"\n      },\n      \"balance\": \"1\"\n    }\n  ],\n  \"totalCount\": 6,\n  \"blockHash\": \"0xf9a2a4e15116680e22b160c734529f62d89d54cde0759daf5135672fad0ecebc\"\n}\n"
                  },
                  "withContractFiltering": {
                    "summary": "Response (with contract filtering)",
                    "value": "{\n  \"ownedNfts\": [{\n    \"contract\": {\n      \"address\": \"0x34d77a17038491a2a9eaa6e690b7c7cd39fc8392\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x0000000000000000000000000000000000000000000000000000000000000277\"\n    }\n  }],\n  \"totalCount\": 1,\n  \"blockHash\": \"0x3d8bca59c08e41f55d46ebbe738327eb12955cf280bd06ef7d40352919c188d8\"\n}\n"
                  },
                  "withPagination": {
                    "summary": "Response (with pagination)",
                    "value": "{\n  \"ownedNfts\": [{\n    \"contract\": {\n      \"address\": \"0x97597002980134bea46250aa0510c9b90d87a587\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x00000000000000000000000000000000000000000000000000000000000009cb\"\n    }\n  }, {\n    \"contract\": {\n      \"address\": \"0x97597002980134bea46250aa0510c9b90d87a587\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x00000000000000000000000000000000000000000000000000000000000009cc\"\n    }\n  }, {\n    \"contract\": {\n      \"address\": \"0x5ab21ec0bfa0b29545230395e3adaca7d552c948\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x00000000000000000000000000000000000000000000000000000000000006dc\"\n    }\n  }, {\n    \"contract\": {\n      \"address\": \"0x3b3ee1931dc30c1957379fac9aba94d1c48a5405\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x000000000000000000000000000000000000000000000000000000000000001a\"\n    }\n  }, {\n    \"contract\": {\n      \"address\": \"0x69c40e500b84660cb2ab09cb9614fa2387f95f64\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x0000000000000000000000000000000000000000000000000000000000000391\"\n    }\n  }, {\n    \"contract\": {\n      \"address\": \"0x97597002980134bea46250aa0510c9b90d87a587\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x00000000000000000000000000000000000000000000000000000000000008d5\"\n    }\n  }, {\n    \"contract\": {\n      \"address\": \"0x97597002980134bea46250aa0510c9b90d87a587\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x0000000000000000000000000000000000000000000000000000000000000a1d\"\n    }\n  }, {\n    \"contract\": {\n      \"address\": \"0x97597002980134bea46250aa0510c9b90d87a587\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x000000000000000000000000000000000000000000000000000000000000002a\"\n    }\n  }, {\n    \"contract\": {\n      \"address\": \"0x97597002980134bea46250aa0510c9b90d87a587\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x000000000000000000000000000000000000000000000000000000000000038e\"\n    }\n  }, {\n    \"contract\": {\n      \"address\": \"0x97597002980134bea46250aa0510c9b90d87a587\"\n    },\n    \"id\": {\n      \"tokenId\": \"0x000000000000000000000000000000000000000000000000000000000000244b\"\n    }\n  }],\n  \"pageKey\": \"88434286-7eaa-472d-8739-32a0497c2a18\",\n  \"totalCount\": 277,\n  \"blockHash\": \"0x94d5ab52b8a6571733f6b183ef89f31573b82a4e78f8129b0ce90ef0beaf208b\"\n}\n"
                  }
                }
              }
            }
          }
        },
        "operationId": "getNFTs"
      }
    },
    "/{apiKey}/getNFTMetadata": {
      "get": {
        "summary": "getNFTMetadata",
        "description": "Gets the metadata associated with a given NFT.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          },
          {
            "name": "contractAddress",
            "description": "String - Address of NFT contract.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tokenId",
            "description": "String - The ID of the token. Can be in hex or decimal format.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "description": "String - 'ERC721' or 'ERC1155'; specifies type of token to query for. API requests will perform faster if this is specified.",
            "name": "tokenType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenUriTimeoutInMs",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "refreshCache",
            "description": "Defaults to false for faster response times.  If true will refresh metadata for given token. If false will check the cache and use it or refresh if cache doesn't exist.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Github: https://github.com/alchemyplatform/alchemy-sdk-js\n// Setup: npm install alchemy-sdk\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: \"demo\", // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Print NFT metadata returned in the response:\nalchemy.nft.getNftMetadata(\n  \"0x5180db8F5c931aaE63c74266b211F580155ecac8\",\n  \"1590\"\n).then(console.log);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contract": {
                      "description": "Object - Contract for returned NFT",
                      "type": "object",
                      "properties": {
                        "address": {
                          "type": "string",
                          "description": "String - Address of NFT contract."
                        }
                      }
                    },
                    "id": {
                      "type": "object",
                      "properties": {
                        "tokenId": {
                          "type": "string",
                          "description": "String - Id for NFT (hex)."
                        },
                        "tokenMetadata": {
                          "type": "object",
                          "properties": {
                            "tokenType": {
                              "type": "string",
                              "description": "String - 'ERC721' or 'ERC1155'"
                            }
                          }
                        }
                      }
                    },
                    "balance": {
                      "type": "string",
                      "description": "String - Token balance"
                    },
                    "title": {
                      "type": "string",
                      "description": "String - Name of the NFT asset."
                    },
                    "description": {
                      "type": "string",
                      "description": "String - Brief human-readable description"
                    },
                    "tokenUri": {
                      "type": "object",
                      "properties": {
                        "raw": {
                          "type": "string",
                          "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated."
                        },
                        "gateway": {
                          "type": "string",
                          "description": "String - Public gateway uri for the raw uri above."
                        }
                      }
                    },
                    "media": {
                      "type": "object",
                      "properties": {
                        "raw": {
                          "type": "string",
                          "description": "String - Uri representing the location of the NFT media asset. This is a backup for you to parse when the metadata field is not automatically populated."
                        },
                        "gateway": {
                          "type": "string",
                          "description": "String - Public gateway uri for the raw asset above."
                        },
                        "thumbnail": {
                          "type": "string",
                          "description": "URL for a resized thumbnail of the NFT media asset."
                        },
                        "format": {
                          "type": "string",
                          "description": "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets."
                        },
                        "bytes": {
                          "type": "integer",
                          "description": "The size of the media asset in bytes."
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "description": "String - Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
                      "properties": {
                        "image": {
                          "type": "string",
                          "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces."
                        },
                        "external_url": {
                          "type": "string",
                          "description": "String - The image URL that appears alongside the asset image on NFT platforms."
                        },
                        "background_color": {
                          "type": "string",
                          "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal."
                        },
                        "name": {
                          "type": "string",
                          "description": "String - Name of the NFT asset."
                        },
                        "description": {
                          "type": "string",
                          "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)"
                        },
                        "attributes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "value": {
                                "type": "string"
                              },
                              "trait_type": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Object - Traits/attributes/characteristics for each NFT asset."
                        }
                      }
                    },
                    "timeLastUpdated": {
                      "type": "string",
                      "description": "String - ISO timestamp of the last cache refresh for the information returned in the metadata field."
                    },
                    "error": {
                      "type": "string",
                      "description": "String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getNFTMetadata"
      }
    },
    "/{apiKey}/getContractMetadata": {
      "get": {
        "summary": "getContractMetadata",
        "description": "Queries NFT high-level collection/contract level information.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          },
          {
            "description": "String - Address of NFT contract.",
            "name": "contractAddress",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Github: https://github.com/alchemyplatform/alchemy-sdk-js\n// Setup: npm install alchemy-sdk\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: \"demo\", // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n\nalchemy.nft\n  .getContractMetadata(\"0x61fce80d72363b731425c3a2a46a1a5fed9814b2\")\n  .then(console.log);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "address": {
                      "type": "string",
                      "description": "String - Contract address for the queried NFT collection"
                    },
                    "contractMetadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "String - NFT contract name."
                        },
                        "symbol": {
                          "type": "string",
                          "description": "String - NFT contract symbol abbreviation."
                        },
                        "totalSupply": {
                          "type": "string",
                          "description": "String - Total number of NFTs in a given NFT collection."
                        },
                        "tokenType": {
                          "type": "string",
                          "description": "String - 'erc721' or 'erc1155' NFT token type."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getContractMetadata"
      }
    },
    "/{apiKey}/getNFTsForCollection": {
      "get": {
        "summary": "getNFTsForCollection",
        "description": "Gets all NFTs for a given NFT contract.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          },
          {
            "description": "String - contract address for the NFT collection",
            "name": "contractAddress",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "description": "Boolean - if set to true, returns NFT metadata; otherwise will only return tokenIds. Defaults to false.",
            "name": "withMetadata",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "in": "query"
          },
          {
            "description": "String - An offset used for pagination. Can be a hex string, or a decimal.",
            "name": "startToken",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Integer - Sets the total number of NFTs returned in the response. Defaults to 100.",
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.",
            "name": "tokenUriTimeoutInMs",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Github: https://github.com/alchemyplatform/alchemy-sdk-js\n// Setup: npm install alchemy-sdk\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: \"demo\", // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Print total NFT collection returned in the response:\nalchemy.nft\n  .getNftsForContract(\"0x61fce80d72363b731425c3a2a46a1a5fed9814b2\")\n  .then(console.log);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nfts": {
                      "description": "List of objects that represent NFTs stored under the queried contract address.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "object",
                            "properties": {
                              "tokenId": {
                                "type": "string",
                                "description": "String - Id for NFT (hex)."
                              },
                              "tokenMetadata": {
                                "type": "object",
                                "properties": {
                                  "tokenType": {
                                    "type": "string",
                                    "description": "String - 'ERC721' or 'ERC1155'"
                                  }
                                }
                              }
                            }
                          },
                          "tokenUri": {
                            "type": "object",
                            "properties": {
                              "raw": {
                                "type": "string",
                                "description": "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated."
                              },
                              "gateway": {
                                "type": "string",
                                "description": "String - Public gateway uri for the raw uri above."
                              }
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "description": "String - Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.",
                            "properties": {
                              "image": {
                                "type": "string",
                                "description": "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces."
                              },
                              "external_url": {
                                "type": "string",
                                "description": "String - The image URL that appears alongside the asset image on NFT platforms."
                              },
                              "background_color": {
                                "type": "string",
                                "description": "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal."
                              },
                              "name": {
                                "type": "string",
                                "description": "String - Name of the NFT asset."
                              },
                              "description": {
                                "type": "string",
                                "description": "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)"
                              },
                              "attributes": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "type": "string"
                                    },
                                    "trait_type": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "description": "Object - Traits/attributes/characteristics for each NFT asset."
                              }
                            }
                          }
                        }
                      }
                    },
                    "nextToken": {
                      "type": "string",
                      "description": "String - An offset used for pagination"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getNFTsForCollection"
      }
    },
    "/{apiKey}/getOwnersForToken": {
      "get": {
        "summary": "getOwnersForToken",
        "description": "Get the owner(s) for a token.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          },
          {
            "description": "String - The address of the contract that the token belongs to. We currently support both ERC721 and ERC1155 contracts.",
            "name": "contractAddress",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tokenId",
            "description": "String - The ID of the token. Can be in hex or decimal format.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Github: https://github.com/alchemyplatform/alchemy-sdk-js\n// Setup: npm install alchemy-sdk\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: \"demo\", // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Print total NFT count returned in the response:\nalchemy.nft.getOwnersForNft(\"0x5180db8F5c931aaE63c74266b211F580155ecac8\", \"1590\").then(\n  console.log\n);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "owners": {
                      "description": "A list of strings representing addresses of the owners. <br/>For ERC721 tokens the list will contain just a single owner. <br/>For ERC1155 tokens the list may contain multiple owners if the ERC1155 token in question is semi-fungible or fungible.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getOwnersForToken"
      }
    },
    "/{apiKey}/getOwnersForCollection": {
      "get": {
        "summary": "getOwnersForCollection",
        "description": "Gets all owners for a given NFT contract.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          },
          {
            "description": "String - Contract address for the NFT collection",
            "name": "contractAddress",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "description": "Boolean - [boolean]  false by default. If set to true the query will include the token balances per token id for each owner.",
            "name": "withTokenBalances",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Github: https://github.com/alchemyplatform/alchemy-sdk-js\n// Setup: npm install alchemy-sdk\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: \"demo\", // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Print total NFT count returned in the response:\nalchemy.nft\n  .getOwnersForContract(\"0x61fce80d72363b731425c3a2a46a1a5fed9814b2\")\n  .then(console.log);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ownerAddresses": {
                      "description": "List of all addresses that own one of the NFTs from the queried contract address.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getOwnersForCollection"
      }
    },
    "/{apiKey}/getSpamContracts": {
      "get": {
        "summary": "getSpamContracts",
        "description": "Returns a list of all spam contracts marked by Alchemy.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Github: https://github.com/alchemyplatform/alchemy-sdk-js\n// Setup: npm install alchemy-sdk\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: \"demo\", // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Print all spam NFT contracts returned in the response:\nalchemy.nft.getSpamContracts().then(console.log);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of contract addresses earmarked as spam by Alchemy.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "operationId": "getSpamContracts"
      }
    },
    "/{apiKey}/isSpamContract": {
      "get": {
        "summary": "isSpamContract",
        "description": "Returns whether a contract is marked as spam or not by Alchemy.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          },
          {
            "description": "String - The NFT contract address in question.",
            "name": "contractAddress",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Github: https://github.com/alchemyplatform/alchemy-sdk-js\n// Setup: npm install alchemy-sdk\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: \"demo\", // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Print whether an NFT contract is spam\nalchemy.nft\n  .isSpamContract(\"0x000440f08436a7b866d1ae42db5e0be801da722a\")\n  .then(console.log);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "description": "<br/> True - if the queried contract is marked as spam. <br/> False - if the queried contract is considered valid."
                }
              }
            }
          }
        },
        "operationId": "isSpamContract"
      }
    },
    "/{apiKey}/reingestContract": {
      "get": {
        "summary": "reingestContract",
        "description": "Triggers metadata refresh for an entire NFT collection and refreshes stale metadata after a collection reveal/collection changes.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          },
          {
            "description": "String - The address of the NFT contract/collection that needs to be refreshed.",
            "name": "contractAddress",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Github: https://github.com/alchemyplatform/alchemy-sdk-js\n// Setup: npm install alchemy-sdk\nimport {\n  Network,\n} from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: \"demo\", // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Print total NFT count returned in the response:\nalchemy.nft.refreshContract(\n  \"0x5180db8F5c931aaE63c74266b211F580155ecac8\",\n  \"1590\"\n).then(console.log);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contractAddress": {
                      "type": "string",
                      "description": "String - The address of the NFT contract/collection that is refreshing."
                    },
                    "reingestionState": {
                      "type": "string",
                      "enum": [
                        "does_not_exist",
                        "already_queried",
                        "in_progress",
                        "finished",
                        "queued",
                        "queue_failed"
                      ],
                      "description": "<br/> String - The current state of the reingestion request. <br/>'does_not_exist' - The contract requested is not an NFT and does not contain proper metadata <br/>'already_queried' - Contract already queried <br/>'in_progress' - Ingestion in progress <br/>'finished' - Ingestion complete <br/>'queued' - Ingestion request placed into queue and awaiting execution. <br/>'queue_failed' - Queue job incomplete"
                    },
                    "progress": {
                      "type": "string",
                      "description": "String - Percentage of tokens successfully refreshed."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "reingestContract"
      }
    },
    "/{apiKey}/getFloorPrice": {
      "get": {
        "summary": "getFloorPrice",
        "description": "Returns the floor prices of a NFT collection by marketplace.",
        "tags": [
          "NFT API Endpoints"
        ],
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "demo"
            },
            "required": true
          },
          {
            "description": "String - Contract address for the NFT collection.",
            "name": "contractAddress",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "x-readme": {
          "samples-languages": [
            "javascript",
            "curl",
            "python",
            "go"
          ],
          "code-samples": [
            {
              "language": "javascript",
              "name": "Alchemy SDK",
              "code": "// Github: https://github.com/alchemyplatform/alchemy-sdk-js\n// Setup: npm install alchemy-sdk\nimport { Network, Alchemy } from \"alchemy-sdk\";\n\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\nconst settings = {\n  apiKey: \"demo\", // Replace with your Alchemy API Key.\n  network: Network.ETH_MAINNET, // Replace with your network.\n};\n\nconst alchemy = new Alchemy(settings);\n\n// Print the NFT floor price for a contract\nalchemy.nft\n  .getFloorPrice(\"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\")\n  .then(console.log);\n"
            }
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Name of the NFT marketplace where the collection is listed. Current marketplaces supported -  OpenSea, LooksRare",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "floorPrice": {
                        "type": "number",
                        "description": "Number - The floor price of the collection on the given marketplace."
                      },
                      "priceCurrency": {
                        "type": "string",
                        "description": "String - The currency in which the floor price is denominated. Typically, denominated in ETH",
                        "enum": [
                          "ETH"
                        ]
                      },
                      "collectionUrl": {
                        "type": "string",
                        "description": "String - Link to the collection on the given marketplace."
                      },
                      "retrievedAt": {
                        "type": "string",
                        "description": "String - UTC timestamp of when the floor price was retrieved from the marketplace."
                      },
                      "error": {
                        "type": "string",
                        "description": "String - Returns an error if there was an error fetching floor prices from the given marketplace."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getFloorPrice"
      }
    }
  },
  "components": {
    "schemas": {
      "x-readme": {
        "samples-languages": [
          "javascript",
          "curl",
          "python",
          "go"
        ]
      }
    }
  }
}